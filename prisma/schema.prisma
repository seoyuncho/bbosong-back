generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model coupon {
  id         Int       @id @default(autoincrement())
  used       Boolean?  @default(false)
  sponsor_id Int
  user_id    Int?
  created_at DateTime? @default(now()) @db.Timestamp(0)
  used_at    DateTime? @db.Timestamp(0)
  sponsor    sponsor   @relation(fields: [sponsor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "coupon_ibfk_1")
  user       user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "coupon_ibfk_2")

  @@index([sponsor_id], map: "sponsor_id")
  @@index([user_id], map: "user_id")
}

model sponsor {
  id              Int       @id @default(autoincrement())
  brand_name      String    @db.VarChar(255)
  industry        String?   @db.VarChar(100)
  address         String?   @db.VarChar(255)
  keywords        String?   @db.Text
  advertising_fee Decimal?  @default(0.00) @db.Decimal(15, 2)
  discount_coupon String?   @db.Text
  description     String?   @db.Text
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  coupon          coupon[]
}

model station {
  id                                           Int              @id @default(autoincrement())
  name                                         String           @unique(map: "name") @db.VarChar(100)
  address                                      String           @db.VarChar(255)
  initial_umbrella_count                       Int?             @default(0)
  current_umbrella_count                       Int?             @default(0)
  max_umbrella_capacity                        Int?             @default(0)
  created_at                                   DateTime?        @default(now()) @db.Timestamp(0)
  updated_at                                   DateTime?        @default(now()) @db.Timestamp(0)
  umbrella_umbrella_station_borrow_idTostation umbrella[]       @relation("umbrella_station_borrow_idTostation")
  umbrella_umbrella_station_return_idTostation umbrella[]       @relation("umbrella_station_return_idTostation")
  umbrellatraces                               umbrellatraces[]
}

model umbrella {
  id                                          Int              @id @default(autoincrement())
  qr_info                                     String           @unique(map: "qr_info") @db.VarChar(255)
  station_borrow_id                           Int?
  station_return_id                           Int?
  rent_start                                  DateTime?        @db.DateTime(0)
  rent_end                                    DateTime?        @db.DateTime(0)
  rent_returned                               DateTime?        @db.DateTime(0)
  created_at                                  DateTime?        @default(now()) @db.Timestamp(0)
  updated_at                                  DateTime?        @default(now()) @db.Timestamp(0)
  station_umbrella_station_borrow_idTostation station?         @relation("umbrella_station_borrow_idTostation", fields: [station_borrow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrella_ibfk_1")
  station_umbrella_station_return_idTostation station?         @relation("umbrella_station_return_idTostation", fields: [station_return_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrella_ibfk_2")
  umbrellatraces                              umbrellatraces[]

  @@index([station_borrow_id], map: "station_borrow_id")
  @@index([station_return_id], map: "station_return_id")
}

model umbrellatraces {
  id          Int       @id @default(autoincrement())
  umbrella_id Int
  station_id  Int
  trace_time  DateTime? @default(now()) @db.Timestamp(0)
  umbrella    umbrella  @relation(fields: [umbrella_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrellatraces_ibfk_1")
  station     station   @relation(fields: [station_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrellatraces_ibfk_2")

  @@index([station_id], map: "station_id")
  @@index([umbrella_id], map: "umbrella_id")
}

model user {
  id                Int           @id @default(autoincrement())
  email             String        @unique(map: "email") @db.VarChar(255)
  password          String        @db.VarChar(255)
  name              String        @db.VarChar(100)
  gender            user_gender?
  phone             String?       @db.VarChar(20)
  birth_date        DateTime?     @db.Date
  address           String?       @db.VarChar(255)
  school_or_company String?       @db.VarChar(255)
  major_or_job      String?       @db.VarChar(255)
  interests         String?       @db.Text
  hobbies           String?       @db.Text
  reward_points     Int?          @default(0)
  overdue_days      Int?          @default(0)
  created_at        DateTime?     @default(now()) @db.Timestamp(0)
  updated_at        DateTime?     @default(now()) @db.Timestamp(0)
  coupon            coupon[]
  userlocation      userlocation?
}

model userlocation {
  uid        Int                  @id
  location   Unsupported("point")
  updated_at DateTime?            @default(now()) @db.Timestamp(0)
  user       user                 @relation(fields: [uid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userlocation_ibfk_1")
}

enum user_gender {
  M
  F
  Other
}
