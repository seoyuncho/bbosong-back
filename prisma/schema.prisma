generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model station {
  id                                           Int              @id @default(autoincrement())
  name                                         String           @unique(map: "name") @db.VarChar(100)
  latitude                                     Float
  longitude                                    Float
  address                                      String           @db.VarChar(255)
  initial_umbrella_count                       Int?             @default(0)
  current_umbrella_count                       Int?             @default(0)
  max_umbrella_capacity                        Int?             @default(0)
  created_at                                   DateTime?        @default(now()) @db.Timestamp(0)
  updated_at                                   DateTime?        @default(now()) @db.Timestamp(0)
  umbrella_umbrella_station_borrow_idTostation umbrella[]       @relation("umbrella_station_borrow_idTostation")
  umbrella_umbrella_station_return_idTostation umbrella[]       @relation("umbrella_station_return_idTostation")
  umbrellatraces                               umbrellatraces[]
}

model umbrella {
  id                                          Int              @id @default(autoincrement())
  qr_info                                     String           @unique(map: "qr_info") @db.VarChar(255)
  station_borrow_id                           Int?
  station_return_id                           Int?
  rent_start                                  DateTime?        @db.DateTime(0)
  rent_end                                    DateTime?        @db.DateTime(0)
  rent_returned                               DateTime?        @db.DateTime(0)
  created_at                                  DateTime?        @default(now()) @db.Timestamp(0)
  updated_at                                  DateTime?        @default(now()) @db.Timestamp(0)
  station_umbrella_station_borrow_idTostation station?         @relation("umbrella_station_borrow_idTostation", fields: [station_borrow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrella_ibfk_1")
  station_umbrella_station_return_idTostation station?         @relation("umbrella_station_return_idTostation", fields: [station_return_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrella_ibfk_2")
  umbrellatraces                              umbrellatraces[]

  users User[] @relation 

  @@index([station_borrow_id], map: "station_borrow_id")
  @@index([station_return_id], map: "station_return_id")
}

model umbrellatraces {
  id          Int       @id @default(autoincrement())
  umbrella_id Int
  station_id  Int
  user_id     Int
  trace_time  DateTime? @default(now()) @db.Timestamp(0)

  umbrella    umbrella  @relation(fields: [umbrella_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrellatraces_ibfk_1")
  station     station   @relation(fields: [station_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "umbrellatraces_ibfk_2")
  user        User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([station_id], map: "station_id")
  @@index([umbrella_id], map: "umbrella_id")
  @@index([user_id], map: "user_id")
}



model User {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(30)
  email             String   @unique @db.VarChar(60)
  password          String   @db.VarChar(255)
  gender            Gender
  birthdate         DateTime @db.Date
  usertype          UserType
  signupVerifyToken String   @db.VarChar(100)
  isVerified        Boolean  @default(false)
  bubbleCount       Int      @default(0)        // 비눗방울(보유 방울 개수)
  travelDistance    Float    @default(0)        // 이동 거리
  rentCount         Int      @default(0)        // 대여 횟수
  umbrellaId        Int?                             // 우산 아이디
  umbrella          umbrella? @relation(fields: [umbrellaId], references: [id])
  umbrellatraces    umbrellatraces[]
}

enum Gender {
  male
  female
  other
}

enum UserType {
  customer
  store_owner
}

model Store {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  latitude    Float
  longitude   Float
  description String?      @db.Text
  address     String?      @db.VarChar(255)
  category    String       @db.VarChar(50)
  image_url   String?      @db.VarChar(255)
  hashtags    StoreHashtag[]
  bubbleCount Int          @default(0) 
}

model Hashtag {
  id       Int            @id @default(autoincrement())
  tag_name String         @unique @db.VarChar(50)
  stores   StoreHashtag[]
}

model StoreHashtag {
  storeId   Int
  hashtagId Int
  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([storeId, hashtagId])
}

